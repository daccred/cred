/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RouterContract extends Truffle.Contract<RouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RouterInstance>;
}

export interface BadgeContractDeployed {
  name: "BadgeContractDeployed";
  args: {
    contractAddress: string;
    createdAt: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = BadgeContractDeployed;

export interface RouterInstance extends Truffle.ContractInstance {
  __init_date__(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  credentials(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

  createContractForClient: {
    (
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    __init_date__(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    credentials(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

    createContractForClient: {
      (
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
