/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-unused-vars */
import ABI from '@/lib/abis';
import { DACRED_ROUTER_KOVAN } from '@/config/constants';
import { useWeb3ExecuteFunction, useMoralisFile, useMoralis, useNewMoralisObject } from 'react-moralis';
import Moralis from 'moralis';

const options = {
  abi: ABI.dacredRouterABI,
  contractAddress: DACRED_ROUTER_KOVAN,
  functionName: 'createContractForClient',
  params: {
    name: 'Fall Contract',
    certId: 'FXCVIA',
  },
};

const imgBase64 =
  '';

export default function MoralisTest(): JSX.Element {
  /* ================================================================================================ */

  const { data, error, fetch, isFetching, isLoading } = useWeb3ExecuteFunction(options);
  const { isSaving, error: objError, save } = useNewMoralisObject('Applications');

  const { web3, enableWeb3, isWeb3Enabled, isWeb3EnableLoading, web3EnableError } = useMoralis();
  const { isUploading, moralisFile, saveFile } = useMoralisFile();

  const _handleSaveFile = async () => {
    const metadata = { createdById: 'some-user-id' };
    const tags = { groupId: 'some-group-id' };

    await saveFile(
      'jinger.png',
      { base64: imgBase64 },
      {
        type: 'image/png',
        metadata,
        tags,
        saveIPFS: true,
        onSuccess: (file) => {
          // console.log(file._ipfs, file._hash)  // Not added to types, but exists
          const inferFile = file as Moralis.File & { _ipfs: string; _hash: string };
          save(
            { name: 'red', age: 112, resume: file, ipfs: inferFile._ipfs, fileHash: inferFile._hash },
            { onSuccess: (res) => console.log(res) }
          );
        },
      }
    );
  };

  /* ================================================================================================ */

  return (
    <div className='block max-w-5xl mx-auto'>
      {error && <h6>{JSON.stringify(error)}</h6>}
      <button className='p-2 border-2' onClick={() => fetch()} disabled={isFetching}>
        Fetch data
      </button>

      <button className='p-2 border-2' onClick={() => enableWeb3()}>
        EnableWeb3
      </button>
      <button className='p-2 border-2' onClick={() => _handleSaveFile()}>
        Save File to IPFS
      </button>
      <button
        className='p-2 border-2'
        onClick={() => save({ name: 'andrew', age: 12 }, { onSuccess: (res) => console.log(res) })}
      >
        Save New Object
      </button>

      {isWeb3Enabled && <h5>We have Web3</h5>}
      {moralisFile && (
        <>
          <img src={moralisFile._url} alt='base-image' />
          {/* <img src={`data:image/png;base64,${imgBase64}`} alt="base-image" /> */}
          {JSON.stringify({ url: moralisFile?._url, file: moralisFile?.toJSON })}
        </>
      )}
      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
    </div>
  );
}
